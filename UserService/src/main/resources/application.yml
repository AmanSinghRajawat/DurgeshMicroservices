server:
  port: 8081
  
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/durgeshuserservice
    username: root
    password: root

  application:
    name: USERSERVICE


  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.MySQLDialect
   
   
   
#   Here we are telling from where we have to fetch the configuration files in this case we create the config server, So giving configserver url. Our Config server calls the configuration files
#  Client   ---talks---->  configsever  ---talks----> Configuration files [github files]
   
  config:
    import: configserver:http://localhost:8085
    
    
    
#  Here we are declaring the profiles. which configuration file you want to use for this service.
    
    
#  profiles:
#    active:
#    - dev





# Circuit Breaker Design Pattern Configurations.

# Actuator Configuration.

management:
  endpoints.web.exposure.include:
    - '*'                                        # you can use 'health'.
  endpoint.health.show-details: always    
  health.circuitbreakers.enabled: true          # enables circuit breaker in health.

    
    
    
# Circuit Breaker Configuration.

# I put all the common configuration [default configuration] on application.yml file of ConfigServer's github file.

resilience4j:
  circuitbreaker:
    instances:
      ratingRestaurantBreaker:         # Circuit Breaker Method Name.
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50        # failure rate > 50, state will be changed from CLOSED to OPEN state.
        minimumNumberOfCalls: 5        # [100]      # minimum number of calls [100].
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 6s   # [60000 ms] # wait duration in OPEN state.
        permittedNumberOfCallsInHalfOpenState: 3   # [10]  # move from half_open to open & closed state.
        slidingWindowSize: 10    # [100]
        slidingWindowType: COUNT_BASED    # [COUNT_BASED] # time based or count based sliding window.
        
        
        
        
        
        
# Retry Design Patter Configuration.


  retry:
    instances:
      ratingRestaurantRetry:
        maxAttempts: 3
        waitDuration: 5s
        
        
        
# RateLimiter Design Patter Configuration.


  ratelimiter:
    instances:
      ratingRestaurantRateLimiter:
        limitRefreshPeriod: 4s
        limitForPeriod: 2
        timeoutDuration: 0s
        
        
        
        
        